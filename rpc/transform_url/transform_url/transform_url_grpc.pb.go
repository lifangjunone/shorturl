// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.0--rc3
// source: transform_url.proto

package transform_url

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	TransformUrl_Shorten_FullMethodName = "/transform_url.Transform_url/shorten"
	TransformUrl_Expand_FullMethodName  = "/transform_url.Transform_url/expand"
)

// TransformUrlClient is the client API for TransformUrl service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TransformUrlClient interface {
	Shorten(ctx context.Context, in *ShortenReq, opts ...grpc.CallOption) (*ShortenResp, error)
	Expand(ctx context.Context, in *ExpandReq, opts ...grpc.CallOption) (*ExpandResp, error)
}

type transformUrlClient struct {
	cc grpc.ClientConnInterface
}

func NewTransformUrlClient(cc grpc.ClientConnInterface) TransformUrlClient {
	return &transformUrlClient{cc}
}

func (c *transformUrlClient) Shorten(ctx context.Context, in *ShortenReq, opts ...grpc.CallOption) (*ShortenResp, error) {
	out := new(ShortenResp)
	err := c.cc.Invoke(ctx, TransformUrl_Shorten_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transformUrlClient) Expand(ctx context.Context, in *ExpandReq, opts ...grpc.CallOption) (*ExpandResp, error) {
	out := new(ExpandResp)
	err := c.cc.Invoke(ctx, TransformUrl_Expand_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TransformUrlServer is the server API for TransformUrl service.
// All implementations must embed UnimplementedTransformUrlServer
// for forward compatibility
type TransformUrlServer interface {
	Shorten(context.Context, *ShortenReq) (*ShortenResp, error)
	Expand(context.Context, *ExpandReq) (*ExpandResp, error)
	mustEmbedUnimplementedTransformUrlServer()
}

// UnimplementedTransformUrlServer must be embedded to have forward compatible implementations.
type UnimplementedTransformUrlServer struct {
}

func (UnimplementedTransformUrlServer) Shorten(context.Context, *ShortenReq) (*ShortenResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Shorten not implemented")
}
func (UnimplementedTransformUrlServer) Expand(context.Context, *ExpandReq) (*ExpandResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Expand not implemented")
}
func (UnimplementedTransformUrlServer) mustEmbedUnimplementedTransformUrlServer() {}

// UnsafeTransformUrlServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TransformUrlServer will
// result in compilation errors.
type UnsafeTransformUrlServer interface {
	mustEmbedUnimplementedTransformUrlServer()
}

func RegisterTransformUrlServer(s grpc.ServiceRegistrar, srv TransformUrlServer) {
	s.RegisterService(&TransformUrl_ServiceDesc, srv)
}

func _TransformUrl_Shorten_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShortenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransformUrlServer).Shorten(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransformUrl_Shorten_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransformUrlServer).Shorten(ctx, req.(*ShortenReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransformUrl_Expand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExpandReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransformUrlServer).Expand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransformUrl_Expand_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransformUrlServer).Expand(ctx, req.(*ExpandReq))
	}
	return interceptor(ctx, in, info, handler)
}

// TransformUrl_ServiceDesc is the grpc.ServiceDesc for TransformUrl service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TransformUrl_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "transform_url.Transform_url",
	HandlerType: (*TransformUrlServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "shorten",
			Handler:    _TransformUrl_Shorten_Handler,
		},
		{
			MethodName: "expand",
			Handler:    _TransformUrl_Expand_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "transform_url.proto",
}
